# Contributing to use-page-view

Thank you for your interest in contributing to use-page-view! This document provides guidelines and instructions for contributing to this project.

## Code of Conduct

By participating in this project, you agree to maintain a respectful and inclusive environment for everyone.

## How Can I Contribute?

### Reporting Bugs

Before creating bug reports, please check the issue list as you might find out that you don't need to create one. When you are creating a bug report, please include as many details as possible:

- Use a clear and descriptive title
- Describe the exact steps to reproduce the problem
- Provide specific examples to demonstrate the steps
- Describe the behavior you observed after following the steps
- Explain which behavior you expected to see instead and why
- Include screenshots if possible
- Include your operating system and browser information

### Suggesting Enhancements

If you have a suggestion for a new feature or enhancement, please:

- Use a clear and descriptive title
- Provide a detailed description of the proposed functionality
- Explain why this enhancement would be useful
- List any similar features in other projects, if applicable

### Pull Requests

1. Fork the repo and create your branch from `main`
2. If you've added code that should be tested, add tests
3. If you've changed APIs, update the documentation
4. Ensure the test suite passes
5. Make sure your code lints
6. Issue that pull request!

## Development Setup

1. Clone the repository:

   ```bash
   git clone https://github.com/christophersesugh/use-page-view.git
   cd use-page-view
   ```

2. Install dependencies:

   ```bash
   npm install
   # or
   npm install --legacy-peer-deps
   ```

3. Link and test locally after making changes (optional):

   ```bash
   # In this project's directory, run
   npm link
   # In your test app, run
   npm link use-page-view
   ```

## Testing

We use Vitest for testing. To run the tests:

```bash
npm run test
```

To run tests in watch mode:

```bash
npm run test:watch
```

## Code Style

- We use TypeScript for type safety
- We use Prettier for code formatting

To check your code style:

```bash
npm run lint
```

To format your code:

```bash
npm run format
```

## Documentation

- All new features should be documented
- Update the README.md if necessary
- Add JSDoc comments to new functions and components
- Update the TypeScript types if you modify the API

## Commit Messages

Please follow these guidelines for commit messages:

- Use the present tense ("Add feature" not "Added feature")
- Use the imperative mood ("Move cursor to..." not "Moves cursor to...")
- Limit the first line to 72 characters or less
- Reference issues and pull requests liberally after the first line

## Release Process

1. **Version Management**:

   - Use `changeset` to manage versions
   - Run `npm run release:local` to create a new version
   - This will:
     - Update the version in `package.json`
     - Generate a changelog
     - Create a git tag

2. **Publishing**:

   - Only maintainers can publish to npm
   - Maintainers will:
     - Run `npm publish` to publish to npm
     - Ensure all tests pass with `npm run ci`
     - Verify the package on npm

3. **Post-Release**:
   - Push changes to GitHub
   - Create a GitHub release
   - Update documentation if needed

## Contributing

1. **Development Workflow**:

   - Fork the repository
   - Create a feature branch
   - Make your changes
   - Run tests: `npm run ci`
   - Push to GitHub
   - Open a Pull Request

2. **Pull Request Process**:

   - Ensure all tests pass
   - Update documentation if needed
   - Follow the existing code style
   - Wait for maintainer review
   - Address any feedback
   - Once approved, a maintainer will merge your PR

3. **After Merging**:
   - Maintainers will handle versioning and publishing
   - Your changes will be included in the next release

## Questions?

Feel free to open an issue for any questions you might have about contributing.

## License

By contributing to use-page-view, you agree that your contributions will be licensed under the project's MIT License.
